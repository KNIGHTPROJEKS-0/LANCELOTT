# UI-TARS Desktop/Agent Configuration
# Configuration for CERBERUS-FANGS LANCELOTT integration
# Optimized for GUI automation and security testing workflows

[general]
# UI-TARS installation path
binary_path = "tools/UI-TARS"

# Framework API URL
framework_url = "http://localhost:7777"

# Default operation timeout (seconds)
default_timeout = 300

# Enable background task execution
background_execution = true

# UI-TARS specific settings
desktop_mode = true
web_interface = true
web_port = 5173
internal_port = 8765

[orchestration]
# Default GUI automation tools for quick access
quick_tools = [
    "screenshot",
    "click",
    "type",
    "scroll",
    "browser_automation"
]

# GUI automation execution order preferences
execution_order = [
    "screenshot",      # Visual context first
    "browser_automation", # Web-based tasks
    "click",          # Element interaction
    "type",           # Text input
    "scroll"          # Navigation
]

# Default orchestration options
default_options = {
    "verbose" = true,
    "save_screenshots" = true,
    "save_recordings" = true,
    "output_dir" = "reports/ui_tars_automation",
    "screenshot_dir" = "reports/screenshots",
    "recording_dir" = "reports/recordings"
}

[gui_automation]
# GUI automation specific settings
screenshot_scale = 1.0
max_loop_count = 50
loop_interval_ms = 2000
action_timeout = 30000
element_timeout = 10000

# Screenshot optimization
enable_screenshot_optimization = true
screenshot_quality = "high"
screenshot_format = "png"

# Browser automation settings
default_browser = "chrome"
browser_headless = false
browser_window_size = "1920x1080"

[workflows]
# Default workflow directory
workflow_dir = "workflows/ui_tars"

# Predefined GUI automation workflows
[workflows.security_testing]
name = "Security Testing Automation"
tools = ["screenshot", "browser_automation", "click", "type"]
description = "Automated security testing workflow with GUI interaction"

[workflows.penetration_testing]
name = "Penetration Testing GUI"
tools = ["browser_automation", "screenshot", "click", "type", "scroll"]
description = "GUI-based penetration testing automation"

[workflows.vulnerability_scanning]
name = "Vulnerability Scanning Interface"
tools = ["screenshot", "browser_automation", "click"]
description = "Automated vulnerability scanning with GUI interface"

[workflows.report_generation]
name = "Automated Report Generation"
tools = ["screenshot", "browser_automation", "type", "click"]
description = "Automated security report generation with screenshots"

[api]
# API endpoints configuration
base_url = "http://localhost:7777/api/v1"

[api.endpoints]
ui_tars = "/tools/ui-tars"
desktop = "/tools/ui-tars/desktop"
agent = "/tools/ui-tars/agent"
automation = "/tools/ui-tars/automation"
screenshots = "/tools/ui-tars/screenshots"
recordings = "/tools/ui-tars/recordings"
status = "/integrations/status"
health = "/health"

[logging]
# Log file path
log_file = "logs/ui_tars_orchestrator.log"

# Log level (DEBUG, INFO, WARNING, ERROR)
log_level = "INFO"

# Enable console output
console_output = true

# Enable screenshot logging
screenshot_logging = true

# Enable action logging
action_logging = true

[security]
# Enable authentication for API calls
auth_enabled = true

# API key for framework authentication (Firebase Web API Key)
api_key = "AIzaSyD0RkGeip2f2rc29YSMHy5w6YeD-5VgriA"

# Enable SSL verification
ssl_verify = true

# Screen recording permissions
screen_recording_enabled = true

# Accessibility permissions
accessibility_enabled = true

[ai]
# AI Model Configuration for UI-TARS Intelligence
# Use Azure AI Foundry GPT-5-Nano for enhanced GUI understanding
model_provider = "azure"
model_name = "gpt-5-nano"
deployment_name = "GPT-5-Navo-Cerberus"
endpoint = "https://gujil-mensn3og-eastus2.cognitiveservices.azure.com/openai/responses?api-version=2025-04-01-preview"
api_version = "2025-04-01-preview"

# Vision-Language Model Settings
vlm_provider = "azure"
vlm_model = "gpt-5-nano"
vlm_endpoint = "https://gujil-mensn3og-eastus2.cognitiveservices.azure.com/openai/responses?api-version=2025-04-01-preview"

# AI Features
enable_ai_analysis = true
enable_smart_automation = true
enable_auto_screenshots = true
enable_vision_understanding = true
enable_gui_intelligence = true

# AI Analysis Settings
max_tokens = 16384
max_completion_tokens = 16384
temperature = 0.1
top_p = 0.9

# Context window for GUI analysis
context_window = 8192

# Vision capabilities
enable_vision_capabilities = true
screenshot_analysis = true
element_detection = true
text_recognition = true

[desktop]
# Desktop application settings
app_name = "UI-TARS Desktop"
app_version = "2.0.0"
enable_tray = true
enable_notifications = true
auto_start = false

# Window settings
default_width = 1200
default_height = 800
resizable = true
minimizable = true
maximizable = true

[agent]
# Agent-TARS CLI settings
cli_name = "agent-tars"
enable_interactive_mode = true
enable_batch_mode = true
enable_scripted_mode = true

# CLI output settings
colored_output = true
progress_indicators = true
verbose_mode = true

[performance]
# Performance optimization settings
enable_gpu_acceleration = false
memory_limit_mb = 2048
cpu_cores = 4
parallel_tasks = 2

# Caching settings
enable_caching = true
cache_dir = "cache/ui_tars"
cache_expiry_hours = 24

[integration]
# CERBERUS-FANGS Framework Integration
framework_integration = true
framework_name = "CERBERUS-FANGS"
framework_version = "2.1.0"

# Tool integration
integrate_with_crush = true
integrate_with_lancelott = true
integrate_with_firebase = true

# Reporting integration
auto_report_generation = true
report_format = "json,html,pdf"
report_templates = "templates/ui_tars"

[presets]
# Preset configuration files
default_preset = "cerberus-gpt5-nano-preset.yaml"
alternative_presets = [
    "cerberus-preset.yaml",
    "cerberus-azure-preset.yaml"
]

# Preset directory
preset_dir = "tools/UI-TARS"
