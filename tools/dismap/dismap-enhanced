#!/bin/bash

# Enhanced Dismap Wrapper Script
# This script provides convenient shortcuts and enhanced functionality for dismap

DISMAP_BIN="/Users/ORDEROFCODE/KNIGHTPROJEKS/CERBERUS-FANGS/LANCELOTT/dismap/dismap"
DISMAP_DIR="/Users/ORDEROFCODE/KNIGHTPROJEKS/CERBERUS-FANGS/LANCELOTT/dismap"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    printf "${1}${2}${NC}\n"
}

# Function to show quick help
show_quick_help() {
    print_color $CYAN "üåÄ Dismap Enhanced Wrapper"
    echo "================================"
    print_color $GREEN "Quick Commands:"
    echo "  dismap-quick <target>     - Quick scan with JSON output"
    echo "  dismap-net <network>      - Network scan with common ports"
    echo "  dismap-full <target>      - Full port scan"
    echo "  dismap-stealth <target>   - Stealth scan (slow, low threads)"
    echo "  dismap-fast <target>      - Fast scan (high threads)"
    echo ""
    print_color $YELLOW "Original dismap help:"
    $DISMAP_BIN -h
}

# Function for quick scan
quick_scan() {
    local target=$1
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local output_dir="$DISMAP_DIR/results"
    
    mkdir -p "$output_dir"
    
    print_color $GREEN "üöÄ Starting quick scan of: $target"
    print_color $BLUE "Output will be saved to: $output_dir/quick_${timestamp}"
    
    $DISMAP_BIN -u "$target" \
        -o "$output_dir/quick_${timestamp}.txt" \
        -j "$output_dir/quick_${timestamp}.json" \
        -t 300
}

# Function for network scan
network_scan() {
    local network=$1
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local output_dir="$DISMAP_DIR/results"
    
    mkdir -p "$output_dir"
    
    print_color $GREEN "üåê Starting network scan of: $network"
    print_color $BLUE "Scanning common ports: 80,443,8080,8443,3389,22,21,23,25,53,110,993,995"
    print_color $BLUE "Output will be saved to: $output_dir/network_${timestamp}"
    
    $DISMAP_BIN -i "$network" \
        -p "80,443,8080,8443,3389,22,21,23,25,53,110,993,995" \
        -o "$output_dir/network_${timestamp}.txt" \
        -j "$output_dir/network_${timestamp}.json" \
        -t 500
}

# Function for full scan
full_scan() {
    local target=$1
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local output_dir="$DISMAP_DIR/results"
    
    mkdir -p "$output_dir"
    
    print_color $GREEN "üéØ Starting full port scan of: $target"
    print_color $YELLOW "‚ö†Ô∏è  This may take a long time!"
    print_color $BLUE "Output will be saved to: $output_dir/full_${timestamp}"
    
    $DISMAP_BIN -i "$target" \
        -p "1-65535" \
        -o "$output_dir/full_${timestamp}.txt" \
        -j "$output_dir/full_${timestamp}.json" \
        -t 800 \
        --timeout 10
}

# Function for stealth scan
stealth_scan() {
    local target=$1
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local output_dir="$DISMAP_DIR/results"
    
    mkdir -p "$output_dir"
    
    print_color $PURPLE "üï∂Ô∏è  Starting stealth scan of: $target"
    print_color $YELLOW "Using low threads and longer timeout to avoid detection"
    print_color $BLUE "Output will be saved to: $output_dir/stealth_${timestamp}"
    
    $DISMAP_BIN -i "$target" \
        -o "$output_dir/stealth_${timestamp}.txt" \
        -j "$output_dir/stealth_${timestamp}.json" \
        -t 50 \
        --timeout 15
}

# Function for fast scan
fast_scan() {
    local target=$1
    local timestamp=$(date +"%Y%m%d_%H%M%S")
    local output_dir="$DISMAP_DIR/results"
    
    mkdir -p "$output_dir"
    
    print_color $RED "‚ö° Starting fast scan of: $target"
    print_color $YELLOW "Using high threads for maximum speed"
    print_color $BLUE "Output will be saved to: $output_dir/fast_${timestamp}"
    
    $DISMAP_BIN -i "$target" \
        -o "$output_dir/fast_${timestamp}.txt" \
        -j "$output_dir/fast_${timestamp}.json" \
        -t 1500 \
        --timeout 3
}

# Main script logic
case "$1" in
    "quick"|"-quick")
        if [ -z "$2" ]; then
            print_color $RED "‚ùå Error: Please provide a target"
            echo "Usage: dismap-enhanced quick <target>"
            exit 1
        fi
        quick_scan "$2"
        ;;
    "net"|"network"|"-net")
        if [ -z "$2" ]; then
            print_color $RED "‚ùå Error: Please provide a network"
            echo "Usage: dismap-enhanced net <network>"
            echo "Example: dismap-enhanced net 192.168.1.0/24"
            exit 1
        fi
        network_scan "$2"
        ;;
    "full"|"-full")
        if [ -z "$2" ]; then
            print_color $RED "‚ùå Error: Please provide a target"
            echo "Usage: dismap-enhanced full <target>"
            exit 1
        fi
        full_scan "$2"
        ;;
    "stealth"|"-stealth")
        if [ -z "$2" ]; then
            print_color $RED "‚ùå Error: Please provide a target"
            echo "Usage: dismap-enhanced stealth <target>"
            exit 1
        fi
        stealth_scan "$2"
        ;;
    "fast"|"-fast")
        if [ -z "$2" ]; then
            print_color $RED "‚ùå Error: Please provide a target"
            echo "Usage: dismap-enhanced fast <target>"
            exit 1
        fi
        fast_scan "$2"
        ;;
    "help"|"-h"|"--help"|"")
        show_quick_help
        ;;
    *)
        # Pass all other arguments directly to dismap
        $DISMAP_BIN "$@"
        ;;
esac
