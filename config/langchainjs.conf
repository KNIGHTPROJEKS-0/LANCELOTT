# LangChain.js AI Integration Configuration
# Configuration for JavaScript/TypeScript LangChain integration

[general]
# LangChain.js project path
project_path = "integrations/frameworks/langchainjs"

# Service port
port = 8101

# Default timeout for operations (seconds)
default_timeout = 30

# Enable development mode
development_mode = true

[nodejs]
# Node.js configuration
node_version_required = "16.0.0"
npm_version_required = "8.0.0"

# Project configuration
package_manager = "npm"  # npm, yarn, pnpm
auto_install_dependencies = true
auto_start_service = false

[service]
# Express.js service configuration
host = "localhost"
port = 8101
cors_enabled = true
json_limit = "10mb"
request_timeout = 30000

# Service endpoints
[service.endpoints]
health = "/health"
analyze = "/analyze"
chain = "/chain"
agent = "/agent"

[dependencies]
# Core LangChain.js dependencies
core_packages = [
    "langchain",
    "@langchain/core",
    "@langchain/community",
    "@langchain/openai",
    "@langchain/anthropic",
    "dotenv",
    "express"
]

# Optional packages
optional_packages = [
    "@langchain/pinecone",
    "@langchain/weaviate",
    "@langchain/hnswlib",
    "pdf-parse",
    "cheerio",
    "puppeteer"
]

[ai_providers]
# AI Provider configurations for JavaScript
[ai_providers.openai]
enabled = true
api_key_env = "OPENAI_API_KEY"
model = "gpt-3.5-turbo"
temperature = 0.1
max_tokens = 1000

[ai_providers.anthropic]
enabled = true
api_key_env = "ANTHROPIC_API_KEY"
model = "claude-instant-1"
temperature = 0.1
max_tokens = 1000

[chains]
# JavaScript chain configurations
default_chain_type = "llm_chain"
enable_streaming = true
enable_callbacks = true

# Chain templates
[chains.security_analysis]
type = "sequential"
description = "Security data analysis chain"
prompt_template = "Analyze this security data: {input}"

[chains.threat_detection]
type = "map_reduce"
description = "Threat detection and analysis"
prompt_template = "Detect and analyze threats in: {input}"

[agents]
# JavaScript agent configurations
[agents.security_agent]
enabled = true
type = "conversational-react-description"
tools = ["security_analyzer", "threat_detector"]
memory_type = "buffer"

[tools]
# Custom tool definitions for JavaScript
[tools.security_analyzer]
name = "Security Analyzer"
description = "Analyze security scan results"
function = "analyzeSecurityData"

[tools.threat_detector]
name = "Threat Detector"
description = "Detect and classify security threats"
function = "detectThreats"

[tools.report_generator]
name = "Report Generator"
description = "Generate security reports"
function = "generateReport"

[logging]
# Logging configuration for Node.js
log_level = "info"  # error, warn, info, debug
log_file = "logs/langchainjs.log"
console_output = true

# Log formatting
log_format = "json"
include_timestamp = true
include_request_id = true

[api]
# API configuration
base_path = "/api/v1/langchainjs"
enable_swagger = true
enable_rate_limiting = true
rate_limit = 100  # requests per minute

# CORS configuration
[api.cors]
origin = ["http://localhost:7777", "http://127.0.0.1:7777"]
methods = ["GET", "POST", "PUT", "DELETE"]
headers = ["Content-Type", "Authorization"]

[security]
# Security configuration
enable_helmet = true
enable_input_validation = true
max_request_size = "10mb"

# API key validation
validate_api_keys = false
required_headers = []

[performance]
# Performance optimization
cluster_mode = false
worker_processes = 1
memory_limit = "512mb"

# Caching
enable_caching = false
cache_ttl = 300

[integration]
# Integration with LANCELOTT framework
framework_api_url = "http://localhost:7777"
enable_webhook_callbacks = true
callback_endpoints = [
    "/api/v1/langchainjs/callback"
]

# Tool integration
[integration.lancelott_tools]
crush = "http://localhost:8000"
cliwrap = "http://localhost:8001"
main_api = "http://localhost:7777"

[scripts]
# NPM scripts configuration
[scripts.npm]
start = "node index.js"
dev = "node --watch index.js"
test = "jest"
build = "tsc"
lint = "eslint ."

[environment]
# Environment variables
NODE_ENV = "development"
PORT = "8101"
DEBUG = "langchain:*"

# Optional environment variables
optional_env_vars = [
    "OPENAI_API_KEY",
    "ANTHROPIC_API_KEY",
    "PINECONE_API_KEY",
    "WEAVIATE_URL"
]
