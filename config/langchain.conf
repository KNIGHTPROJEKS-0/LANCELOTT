# LangChain AI Integration Configuration
# Configuration for Python LangChain framework integration

[general]
# LangChain project path
project_path = "integrations/frameworks/langchain"

# Default timeout for AI operations (seconds)
default_timeout = 60

# Maximum context length for conversations
max_context_length = 4000

# Enable verbose logging
verbose = false

[llm_providers]
# OpenAI Configuration
[llm_providers.openai]
enabled = true
api_key_env = "OPENAI_API_KEY"
model = "gpt-4"
temperature = 0.1
max_tokens = 2000
timeout = 30

# Anthropic Configuration
[llm_providers.anthropic]
enabled = true
api_key_env = "ANTHROPIC_API_KEY"
model = "claude-2"
temperature = 0.1
max_tokens = 2000
timeout = 30

# Local LLM Configuration (if available)
[llm_providers.local]
enabled = false
model_path = ""
context_length = 2048

[security_analysis]
# Security analysis specific settings
enable_vulnerability_detection = true
enable_threat_intelligence = true
enable_incident_response = true
enable_compliance_checking = true

# Analysis depth levels
analysis_depth = "deep"  # shallow, medium, deep
include_remediation = true
include_risk_scoring = true

[agents]
# Security Analyst Agent
[agents.security_analyst]
enabled = true
tools = [
    "vulnerability_analyzer",
    "threat_intelligence",
    "security_report_generator",
    "incident_response"
]
memory_type = "conversation_buffer"
max_memory_length = 10

# Penetration Testing Agent
[agents.pentest_agent]
enabled = true
tools = [
    "nmap_integration",
    "vulnerability_scanner",
    "exploit_advisor",
    "report_generator"
]
memory_type = "conversation_buffer"
max_memory_length = 5

[tools]
# Security Tools Configuration
[tools.vulnerability_analyzer]
description = "Analyze security scan results and identify vulnerabilities"
timeout = 30

[tools.threat_intelligence]
description = "Analyze threats and provide intelligence insights"
timeout = 45

[tools.security_report_generator]
description = "Generate comprehensive security reports"
timeout = 60

[tools.incident_response]
description = "Provide incident response recommendations"
timeout = 30

[chains]
# Pre-defined chain configurations
[chains.security_assessment]
type = "sequential"
steps = [
    "vulnerability_analysis",
    "threat_assessment",
    "risk_evaluation",
    "recommendation_generation"
]

[chains.incident_analysis]
type = "sequential"
steps = [
    "incident_classification",
    "impact_assessment",
    "containment_strategy",
    "recovery_plan"
]

[output]
# Output format preferences
default_format = "json"
include_metadata = true
include_confidence_scores = true
include_citations = true

# Report generation
report_formats = ["markdown", "pdf", "html", "json"]
default_report_format = "markdown"

[logging]
# Logging configuration
log_file = "logs/langchain.log"
log_level = "INFO"
log_ai_interactions = true
log_api_calls = true

[api]
# API configuration
base_url = "http://localhost:7777/api/v1/langchain"
enable_cors = true
rate_limiting = true
max_requests_per_minute = 60

[security]
# Security configuration
enable_input_sanitization = true
enable_output_filtering = true
enable_audit_logging = true

# Content filtering
filter_sensitive_data = true
redact_api_keys = true
redact_passwords = true

[performance]
# Performance optimization
enable_caching = true
cache_ttl = 300  # seconds
max_concurrent_requests = 10
request_timeout = 120

[integration]
# Integration with other LANCELOTT components
integrate_with_crush = true
integrate_with_cliwrap = true
integrate_with_security_tools = true

# Tool integration mappings
[integration.tool_mappings]
nmap = "network_scanner"
argus = "web_scanner"
sherlock = "osint_tool"
spiderfoot = "intelligence_gatherer"
