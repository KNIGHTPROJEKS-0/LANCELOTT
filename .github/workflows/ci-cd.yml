name: LANCELOTT CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test Firebase Configuration
        run: |
          python -c "from core.firebase_config import get_firebase; print('âœ… Firebase config import successful')"

      - name: Test TARS API Import
        run: |
          python -c "from api.routes.tars_api import router; print('âœ… TARS API import successful')"

      - name: Test Core Configuration
        run: |
          python -c "from core.config import settings; print('âœ… Core config import successful')"

  deploy:
    needs: test-and-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Set up Git user
        run: |
          git config --global user.email "knightprojeks@gmail.com"
          git config --global user.name "KNIGHTPROJEKS-0"

      - name: Update deployment timestamp
        run: |
          echo "LAST_DEPLOYED=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> deployment.env
          echo "DEPLOY_COMMIT=${{ github.sha }}" >> deployment.env
          echo "DEPLOY_BRANCH=${{ github.ref_name }}" >> deployment.env

      - name: Commit deployment info
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git remote set-url origin https://KNIGHTPROJEKS-0:${GH_PAT}@github.com/KNIGHTPROJEKS-0/LANCELOTT.git
          git add deployment.env
          git commit -m "ðŸš€ Automated deployment update [skip ci]

          âœ… Deployment completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          ðŸ”— Commit: ${{ github.sha }}
          ðŸŒ¿ Branch: ${{ github.ref_name }}

          Automated by GitHub Actions CI/CD Pipeline" || echo "No changes to commit"
          git push origin HEAD:main

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true

      - name: Run Safety vulnerability scan
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
